swagger: '2.0'
info:
  version: 1.0.0
  title: Bambora Payments API
  description: Bambora Payments API for Q1
  contact:
    name: support-to-be-defined@bambora.com
  termsOfService: 'See http://tbd.bambora.com/terms_of_use'
  license:
    name: TBD
    url: 'http://tbd.bambora.com/licenses/LICENSE-1.0.html'

schemes:
  - https
  - http

basePath: /payments

consumes:
  - application/json

produces:
  - application/json
  - application/problem+json

paths:
  /{payment}/:
    get:
      operationId: query_payment
      summary: Retrieve payment information
      description: >
        Query the payment service for information on this
        payment. Returns payment details and status.
      tags:
        - payments
      parameters:
        - name: API-Version
          in: header
          description: >
            Header to indicate which version of the API this client is
            using. Only changes when backwards-incompatible
            modifications are introduced.
          type: integer
          required: true
        - name: payment
          in: path
          description: Merchant-specific identifier for the payment.
          required: true
          type: string
        - name: merchant
          in: query
          description: >
            Merchant identifier. Only neccessary if the merchant
            authentication token is for another merchant in the same
            corporate hierarchy. The service will validate that the
            merchant authentication token is authorized to perform the
            operation.
          type: string
          required: false
      responses:
        '200':
          description: >
            Payment found by query.
          schema:
            $ref: '#/definitions/PaymentResponse'
        default:
          description: >
            Query failed. A 404 status code is returned when the
            payment can't be found.
          schema:
            $ref: '#/definitions/Error'
  /{payment}/card_token/:
    post:
      operationId: authorize_token_payment
      summary: Post payment with card token
      description: >
        Create a new payment authorization using a tokenized payment card.
      tags:
        - payments
      parameters:
        - name: API-Version
          in: header
          description: >
            Header to indicate which version of the API this client is
            using. Only changes when backwards-incompatible
            modifications are introduced.
          type: integer
          required: true
        - name: payment
          in: path
          description: >
            Identifier for the payment. Must be unique for this merchant.
          required: true
          type: string
        - name: details
          in: body
          description: Payment details
          required: true
          schema:
            $ref: '#/definitions/TokenAuthorization'
      responses:
        '201':
          description: >
            Successful response - payment created. The amount
            specified has been approved.
          schema:
            $ref: '#/definitions/PaymentResponse'
        default:
          description: >
            Unexpected error or card declined. A 402 status code is a declined
            card of failed payment.
          schema:
            $ref: '#/definitions/Error'
  /{payment}/capture/:
    post:
      operationId: capture_payment
      tags:
        - payments
      description: >
        Capture all or a part of the amount specified in the payment.
      produces:
        - application/json
      parameters:
        - name: API-Version
          in: header
          description: >
            Header to indicate which version of the API this client is
            using. Only changes when backwards-incompatible
            modifications are introduced.
          type: integer
          required: true
        - name: payment
          in: path
          description: The payment id of the pre-auth that will be captured.
          required: true
          type: string
        - name: details
          in: body
          description: Capture details
          required: false
          schema:
            $ref: '#/definitions/Capture'
      responses:
        '201':
          description: Successful capture.
          schema:
            $ref: '#/definitions/PaymentResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Error:
    type: object
    properties:
      status:
        type: integer
        format: int32
        enum:
          - 400
          - 401
          - 402
          - 403
          - 404
          - 415
          - 500
        description: |
          The HTTP status code is also included in the message body of
          the response.

          400 indicates an invalid request, usually an incorrectly
          formatted request from the client.

          401 is an authentication exception, no auth supplied.

          402 is a declined payment. The message content was correct,
          however.

          403 is an authentication (e.g. wrong API key) or
          authorization exception (e.g. operation not permitted)

          404 occurs when a resource cannot be found.

          415 incorrect media type supplied in the request.

          500 internal server error. These are rare.
      code:
        type: integer
        format: int32
        description: >
          The code specific to this error. Details of the error can be
          found in the info field of this message.
      message:
        type: string
        description: >
          The human-readable error message that a developer will
          see. It is up to the developers to decide if this message
          should be shown to the user, for example if it is a declined
          card payment vs. a message formatting error.
      info:
        type: string
        description: >
          A URL link to the support documentation for this particular
          error.  The URL will have the error code as part of it. For
          example: http://support.bambora.com/errors/1234
    required:
      - status
  TokenAuthorization:
    type: object
    required:
      - currency
      - amount
      - token
    properties:
      currency:
        type: string
        description: >
          Values of: EUR, USD, CAD, GBP, SEK et c. Uses ISO-4217
          currency codes.
        enum:
          - EUR
          - USD
          - CAD
          - GBP
          - SEK
          - AUD
          - NZD
      amount:
        type: number
        format: int64
        minimum: 0
        description: >
          The amount of the payment in the specified currency's cents
          (or equivalent).
      token:
        type: string
      comment:
        type: string
        maxLength: 256
        description: >
          256 characters of available space for a comment that will be
          saved on the payment.
      merchant:
        type: string
        description: >
            Merchant identifier. Only neccessary if the merchant
            authentication token is for another merchant in the same
            corporate hierarchy. The service will validate that the
            merchant authentication token is authorized to perform the
            operation.
      items:
        type: array
        items:
          $ref: "#/definitions/Item"
  Capture:
    type: object
    properties:
      amount:
        type: number
        format: int64
        minimum: 0
        description: >
          Amount to capture, in cents (or equivalent). If this is less
          than the amount of the payment, a partial capture will be
          performed. If this parameter is omitted, the entire amount
          of the payment will be captured.
      comment:
        type: string
        maxLength: 256
        description: >
          256 characters of available space for a comment that will be
          saved on the payment.
    required:
    - amount
    example:
      amount: 1000
      comment: 10 EUR capture
  PaymentResponse:
    type: object
    required:
      - payment
      - state
    properties:
      region:
        type: string
        description: >
          Geographical region of the merchant. Will be the same as the
          sub-domain of the request.
        enum:
          - emea_0
          - apac_0
          - amer_0
      merchant:
        type: string
        description: >
          Identifier of the merchant. Retrieved during
          onboarding. Will be the same as the host of the request.
      payment:
        type: string
        description: Merchant-specific identifier for the payment.
      state:
        type: string
        description: Set by the system when sent for processing.
        enum:
          - Authorized
          - Authorization Expired
          - Declined
          - Voided
          - Settling
          - Settled
      currency:
        type: string
        description: >
          Values of: EUR, USD, CAD, GBP, SEK et c. Uses ISO-4217
          currency codes.
        enum:
          - EUR
          - USD
          - CAD
          - GBP
          - SEK
          - AUD
          - NZD
      amount:
        type: number
        format: int64
        minimum: 0
        description: >
          The amount of the payment in the specified currency's cents
          (or equivalent).
      comment:
        type: string
        maxLength: 256
        description: >
          256 characters of available space for a comment that will be
          saved on the payment.
      captures:
        type: array
        items:
          $ref: '#/definitions/Capture'
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
  Item:
    type: object
    required: 
      - id
      - description
      - quantity
      - unit_price
      - quantity_unit
      - discount
      - tax_rate
      - total_tax_amount
      - total_amount

    properties:
      id:
        type: string
        description: >
          The merchants identifier of the item.
      ean:
        type: string
        description: >
          The EAN code of the item.
      description:
        type: string
        description: >
          A description of the item, eg. "Fresh organic apples"
      quantity:
        type: number
        format: double
        description: >
          The quantity of item(s) purchacsed.
      quantity_unit:
        type: string
        description: >
          The unit for the quantity, `pcs`, `kg`, `oz`, `ns` etc.
      unit_price:
        type: number
        format: int64
        description: >
          The price for 1 quantity of the item including taxes.
      discount:
        type: number
        format: int64
        description: >
          A discount that will be substracted from the total_amount.
      tax_rate:
        type: number
        format: double
        description: >
          The tax rate. Eg a tax rate  of 25% will be `0.25`.
      total_tax_amount:
        type: number
        format: int64
        description: >
          The total tax amount for the items.
      total_amount:
        type: number
        format: int64
        description: >
          The total price including taxes for the item object purchacsed, `(unit_price * quantity) - discount = total_amount`.
      group:
        type: string
        description: >
          An item group, eg. `fruit` for oranges.
      brand:
        type: string
        description: >
          The brand of the item, eg. `Apple` for an iphone.
